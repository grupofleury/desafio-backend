{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Backend challenge NodeJS Luiz Filho",
        "description": "Patient Registration and Appointment Scheduling API"
    },
    "tags": [
        {
            "name": "Challenge Backend NodeJS - Scheduling Exams",
            "description": "API for scheduling exams and patient registration."
        }
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/customers/{cpf}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Default route",
                "parameters": [
                    {
                        "in": "path",
                        "name": "cpf",
                        "required": true,
                        "description": "Customer CPF",
                        "schema": {
                            "$ref": "#/definitions/cpf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Customers"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Customer with given CPF",
                "tags": [
                    "Customer"
                ],
                "requestBody": {
                    "description": "Customer Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Customer"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "cpf",
                        "required": true,
                        "description": "Customer with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/cpf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    },
                    "404": {
                        "description": "Failed. Customer not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete Customer with given CPF",
                "tags": [
                    "Customer"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "cpf",
                        "required": true,
                        "description": "Delete Customer with id",
                        "schema": {
                            "$ref": "#/definitions/cpf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cpf"
                        }
                    },
                    "404": {
                        "description": "Failed. Customer not found."
                    }
                }
            }
        },
        "/customers": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new customer",
                "requestBody": {
                    "description": "Customer Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Customer"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Customer"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    }
                }
            }
        },
        "/schedules/{id}": {
            "put": {
                "summary": "Update Schedule with given id",
                "tags": [
                    "Schedule"
                ],
                "requestBody": {
                    "description": "Schedule Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Schedule"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Schedule with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    },
                    "404": {
                        "description": "Failed. Schedule not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete Schedule with given id",
                "tags": [
                    "Schedule"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Delete Schedule with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "404": {
                        "description": "Failed. Schedule not found."
                    }
                }
            }
        },
        "/schedules/{cpf}": {
            "get": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Default route",
                "parameters": [
                    {
                        "in": "path",
                        "name": "cpf",
                        "required": true,
                        "description": "Customer cpf",
                        "schema": {
                            "$ref": "#/definitions/cpf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "post": {
                "tags": [
                    "Schedule"
                ],
                "summary": "Create a new Schedule",
                "requestBody": {
                    "description": "Schedule Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Schedule"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    }
                }
            }
        },
        "/exams": {
            "get": {
                "tags": [
                    "Exam"
                ],
                "summary": "Default route",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Exams"
                        }
                    }
                }
            }
        },
        "/exams/{id}": {
            "get": {
                "tags": [
                    "Exam"
                ],
                "summary": "Default route",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Exam id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Exam"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "id": {
            "properties": {
                "integer": {
                    "type": "integer"
                }
            }
        },
        "cpf": {
            "properties": {
                "string": {
                    "type": "string"
                }
            }
        },
        "Customer": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "cpf": {
                    "type": "string"
                },
                "dataOfBirth": {
                    "type": "string"
                }
            }
        },
        "Customers": {
            "type": "object",
            "properties": {
                "customers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Customer"
                    }
                }
            }
        },
        "Schedule": {
            "type": "object",
            "properties": {
                "examId": {
                    "type": "string"
                },
                "cpf": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "Schedulers": {
            "type": "object",
            "properties": {
                "schedulers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Schedule"
                    }
                }
            }
        },
        "Exam": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Exams": {
            "type": "object",
            "properties": {
                "exams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Exam"
                    }
                }
            }
        }
    }
}